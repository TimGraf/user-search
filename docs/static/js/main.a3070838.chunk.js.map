{"version":3,"sources":["client/gitHubClient.js","redux/actions.js","components/UsersSearch.js","components/UserRow.js","components/UsersResults.js","pages/SearchUsersScreen.js","App.js","serviceWorker.js","index.js","redux/rootReducer.js"],"names":["TOKEN","process","REACT_APP_API_KEY","SEARCH_URL","URL","AUTH_HEADER","searchUsers","search","page","pageSize","a","data","config","method","headers","params","q","per_page","URLSearchParams","toString","fetch","response","ok","json","console","log","getUserInfo","userUrl","searchUsersAction","users","total","type","payload","dispatch","GitHubClient","items","total_count","UsersSearch","useDispatch","useSelector","state","useState","setSearch","useEffect","dispatchSearchAction","_","debounce","userActions","leading","trailing","length","className","TextField","name","placeholder","value","onChange","event","searchString","target","variant","UserRow","userData","setUserData","TableRow","TableCell","align","Avatar","alt","src","avatar_url","login","bio","public_repos","followers","following","Link","href","html_url","rel","UsersResults","setPage","setPageSize","TableContainer","component","Paper","Table","TableHead","TableBody","map","user","index","key","url","TableFooter","TablePagination","rowsPerPageOptions","colSpan","count","rowsPerPage","SelectProps","inputProps","native","onChangePage","newPage","onChangeRowsPerPage","newPageSize","parseInt","SearchUsersScreen","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6aAAMA,EAAQC,+HAAYC,kBACpBC,EAAa,IAAIC,IAAI,uCACrBC,EAAW,gBAAYL,GAkDd,GAAEM,YAhDA,uCAAG,WAAOC,EAAQC,EAAMC,GAArB,qBAAAC,EAAA,6DACZC,EAAO,GADK,SAINC,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAiBT,IAGnBU,EAAS,CAAEC,EAAGT,EAAQC,KAAOA,EAAO,EAAIS,SAAUR,GACxDN,EAAWI,OAAS,IAAIW,gBAAgBH,GAAQI,WAZpC,SAaWC,MAAMjB,EAAYS,GAb7B,YAaNS,EAbM,QAeCC,GAfD,kCAgBKD,EAASE,OAhBd,QAgBRZ,EAhBQ,iEAmBZa,QAAQC,IAAR,MAnBY,iCAsBTd,GAtBS,0DAAH,0DAgDae,YAvBb,uCAAG,WAAOC,GAAP,mBAAAjB,EAAA,6DACZC,EAAO,GADK,SAINC,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,cAAiBT,IARb,SAWWe,MAAMO,EAASf,GAX1B,YAWNS,EAXM,QAaCC,GAbD,iCAcKD,EAASE,OAdd,OAcRZ,EAdQ,iEAiBZa,QAAQC,IAAR,MAjBY,iCAoBTd,GApBS,0DAAH,uDC3BXiB,EAAoB,SAACC,EAAOtB,EAAQC,EAAMC,EAAUqB,GAAhC,MAA2C,CACjEC,KAAM,eACNC,QAAS,CACLH,QACAtB,SACAC,OACAC,WACAqB,WAkBO,EATK,SAACvB,EAAQC,EAAMC,GAAf,8CAA4B,WAAMwB,GAAN,eAAAvB,EAAA,sEACzBwB,EAAa5B,YAAYC,EAAQC,EAAMC,GADd,OACtCE,EADsC,OAE5CsB,EAASL,EAAkBjB,EAAKwB,MAAO5B,EAAQC,EAAMC,EAAUE,EAAKyB,cAFxB,2CAA5B,uDASL,EAJD,kBAAM,SAAAH,GAChBA,EAXuB,CACvBF,KAAM,QACNC,QAAS,O,MCRE,SAASK,IACpB,IAAMJ,EAAWK,cACX7B,EAAW8B,aAAY,SAAAC,GAAK,OAAIA,EAAM/B,YAFV,EAGNgC,mBAAS,IAHH,mBAG3BlC,EAH2B,KAGnBmC,EAHmB,KAKlCC,qBAAU,WACN,IAAMC,EAAuBC,IAAEC,UAAS,kBAAMb,EAASc,EAAwBxC,EAAQ,EAAGE,MAAY,IAAM,CAACuC,SAAQ,EAAMC,UAAS,IAG9G,IAAlB1C,EAAO2C,OAFuBjB,EAASc,KAIhCxC,EAAO2C,OAAS,GACvBN,MAEL,CAACrC,EAAQE,EAAUwB,IAQtB,OACI,yBAAKkB,UAAU,eACX,kBAACC,EAAA,EAAD,CACID,UAAU,SACVpB,KAAK,OACLsB,KAAK,SACLC,YAAY,SACZC,MAAOhD,GAAU,GACjBiD,SAbK,SAAAC,GACb,IAAMC,EAAeD,EAAME,OAAOJ,MAClCb,EAAUgB,IAYFE,QAAQ,c,8HC7BT,SAASC,EAAT,GAA6B,IAAXlC,EAAU,EAAVA,QAAU,EACPc,qBADO,mBAChCqB,EADgC,KACtBC,EADsB,KAYvC,OATApB,qBAAU,YACW,uCAAG,4BAAAjC,EAAA,sEACGwB,EAAaR,YAAYC,GAD5B,OACVhB,EADU,OAEhBoD,EAAYpD,GAFI,2CAAH,qDAKjBe,KACD,CAACC,IAGA,kBAACqC,EAAA,EAAD,CAAUb,UAAU,kBAChB,kBAACc,EAAA,EAAD,CAAWC,MAAM,UACb,kBAACC,EAAA,EAAD,CAAQC,IAAG,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAUT,KAAMgB,IAAG,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAUQ,cAEhD,kBAACL,EAAA,EAAD,YACKH,QADL,IACKA,OADL,EACKA,EAAUT,MAEf,kBAACY,EAAA,EAAD,YACKH,QADL,IACKA,OADL,EACKA,EAAUS,OAEf,kBAACN,EAAA,EAAD,YACKH,QADL,IACKA,OADL,EACKA,EAAUU,KAEf,kBAACP,EAAA,EAAD,YACKH,QADL,IACKA,OADL,EACKA,EAAUW,cAEf,kBAACR,EAAA,EAAD,YACKH,QADL,IACKA,OADL,EACKA,EAAUY,WAEf,kBAACT,EAAA,EAAD,YACKH,QADL,IACKA,OADL,EACKA,EAAUa,WAEf,kBAACV,EAAA,EAAD,CAAWC,MAAM,UACb,kBAACU,EAAA,EAAD,CAAMC,KAAI,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAUgB,SAAUnB,OAAO,SAASoB,IAAI,cAChD,kBAAC,IAAD,S,MC/BL,SAASC,EAAT,GAAgC,IAATnD,EAAQ,EAARA,MAC5BI,EAAWK,cACXR,EAAQS,aAAY,SAAAC,GAAK,OAAIA,EAAMV,SACnCvB,EAASgC,aAAY,SAAAC,GAAK,OAAIA,EAAMjC,UAHA,EAIlBkC,mBAAS,GAJS,mBAInCjC,EAJmC,KAI7ByE,EAJ6B,OAKVxC,mBAAS,GALC,mBAKnChC,EALmC,KAKzByE,EALyB,KAuB1C,OAJAvC,qBAAU,WACNsC,EAAQ,KACT,CAAC1E,IAGA,yBAAK4C,UAAU,wBACX,kBAACgC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,kBAACvB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,CAAWd,UAAU,oBAArB,QACA,kBAACc,EAAA,EAAD,CAAWd,UAAU,yBAArB,aACA,kBAACc,EAAA,EAAD,CAAWd,UAAU,mBAArB,OACA,kBAACc,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,oBACA,kBAACA,EAAA,EAAD,yBAGJ,kBAACuB,EAAA,EAAD,KACK3D,EAAM4D,KAAI,SAACC,EAAMC,GAAP,OACP,kBAAC,EAAD,CAASC,IAAKD,EAAOhE,QAAS+D,EAAKG,UAG3C,kBAACC,EAAA,EAAD,KACI,kBAAC9B,EAAA,EAAD,KACI,kBAAC+B,EAAA,EAAD,CACIC,mBAAoB,CAAC,EAAG,GAAI,IAC5BC,QAAS,EACTC,MAAOpE,GAAS,EAChBqE,YAAa1F,GAAY,EACzBD,KAAMA,GAAQ,EACd4F,YAAa,CACTC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEZC,aAjDH,SAAC9C,EAAO+C,GAC7BvB,EAAQuB,GACRvE,EAASc,EAAwBxC,EAAQiG,EAAS/F,KAgD1BgG,oBA7CI,SAAChD,GAC7B,IAAMiD,EAAcC,SAASlD,EAAME,OAAOJ,OAC1C2B,EAAYwB,GACZzB,EAAQ,GACRhD,EAASc,EAAwBxC,EAAQC,EAAMkG,Y,MCzBxC,SAASE,IACpB,IAAM/E,EAAQU,aAAY,SAAAC,GAAK,OAAIA,EAAMX,UAAU,GAEnD,OACI,yBAAKsB,UAAU,WACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAActB,MAAOA,MCHtBgF,MARf,WACE,OACE,yBAAK1D,UAAU,OACb,kBAAC,EAAD,QCKc2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCPAC,EAAQC,aCXC,WAAoC,IAAnC5E,EAAkC,uDAA1B,GAA0B,yCAApBT,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAChC,OAAQD,GACJ,IAAK,eACD,OAAO,2BACAS,GADP,IAEIX,MAAOG,EAAQH,MACftB,OAAQyB,EAAQzB,OAChBC,KAAMwB,EAAQxB,KACdC,SAAUuB,EAAQvB,SAClBqB,MAAOE,EAAQF,QAEvB,IAAK,QACD,OAAO,2BACAU,GADP,IAEIX,MAAO,GACPtB,OAAQ,GACRC,KAAM,EACNC,SAAU,EACVqB,MAAO,IAEf,QACI,OAAOU,KDXE,CAAEX,MAAO,GAAItB,OAAQ,GAAIC,KAAM,EAAGC,SAAU,EAAGqB,MAAO,GACtBuF,YAAgBC,MAErEC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1G,QAAQ0G,MAAMA,EAAMC,c","file":"static/js/main.a3070838.chunk.js","sourcesContent":["const TOKEN = process.env.REACT_APP_API_KEY\nconst SEARCH_URL = new URL('https://api.github.com/search/users');\nconst AUTH_HEADER = `token ${TOKEN}`;\n\nconst searchUsers = async (search, page, pageSize) => {\n    let data = {};\n\n    try {\n        const config = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': AUTH_HEADER\n            }\n        };\n        const params = { q: search, page: (page + 1), per_page: pageSize }\n        SEARCH_URL.search = new URLSearchParams(params).toString();\n        const response = await fetch(SEARCH_URL, config);\n\n        if (response.ok) {\n            data = await response.json();\n        }\n    } catch(error) {\n        console.log(error);\n    }\n\n    return data;\n};\n\nconst getUserInfo = async (userUrl) => {\n    let data = {};\n\n    try {\n        const config = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': AUTH_HEADER\n            }\n        };\n        const response = await fetch(userUrl, config);\n        \n        if (response.ok) {\n            data = await response.json();\n        }\n    } catch(error) {\n        console.log(error);\n    }\n\n    return data;\n};\n\nexport default { searchUsers, getUserInfo };","import GitHubClient from '../client/gitHubClient';\n\nconst searchUsersAction = (users, search, page, pageSize, total) => ({\n    type: 'SEARCH_USERS',\n    payload: {\n        users,\n        search,\n        page,\n        pageSize,\n        total\n    }\n});\n\nconst resetAction = () => ({\n    type: 'RESET',\n    payload: {}\n})\n\nconst searchUsers = (search, page, pageSize) => async dispatch => {\n    const data = await GitHubClient.searchUsers(search, page, pageSize);\n    dispatch(searchUsersAction(data.items, search, page, pageSize, data.total_count));\n};\n\nconst reset = () => dispatch => {\n    dispatch(resetAction());\n};\n\nexport default { searchUsers, reset };","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport _ from 'lodash';\nimport userActions from '../redux/actions';\nimport './UsersSearch.css';\n\nexport default function UsersSearch() {\n    const dispatch = useDispatch();\n    const pageSize = useSelector(state => state.pageSize);\n    const [search, setSearch] = useState('');\n\n    useEffect(() => {\n        const dispatchSearchAction = _.debounce(() => dispatch(userActions.searchUsers(search, 0, pageSize)), 2000, {leading:true, trailing:false});\n        const dispatchResetAction = () => dispatch(userActions.reset());\n\n        if (search.length === 0) {\n            dispatchResetAction();\n        } else if (search.length > 2) {\n            dispatchSearchAction();\n        }\n    }, [search, pageSize, dispatch]);\n    \n    \n    const onChange = event => {\n        const searchString = event.target.value;\n        setSearch(searchString);\n    };\n\n    return (\n        <div className=\"user-search\">\n            <TextField \n                className=\"search\" \n                type=\"text\" \n                name=\"search\" \n                placeholder=\"Search\"\n                value={search || ''}\n                onChange={onChange}\n                variant=\"outlined\"\n            />\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport GitHubClient from '../client/gitHubClient';\nimport './UserRow.css';\n\nexport default function UserRow({userUrl}) {\n    const [userData, setUserData] = useState();\n\n    useEffect(() => {\n        const getUserInfo = async () => {    \n            const data = await GitHubClient.getUserInfo(userUrl);\n            setUserData(data);\n        }\n\n        getUserInfo();\n    }, [userUrl]);\n\n    return (\n        <TableRow className=\"user-table-row\">\n            <TableCell align=\"center\">\n                <Avatar alt={userData?.name} src={userData?.avatar_url}></Avatar>\n            </TableCell>\n            <TableCell>\n                {userData?.name}\n            </TableCell>\n            <TableCell>\n                {userData?.login}\n            </TableCell>\n            <TableCell>\n                {userData?.bio}\n            </TableCell>\n            <TableCell>\n                {userData?.public_repos}\n            </TableCell>\n            <TableCell>\n                {userData?.followers}\n            </TableCell>\n            <TableCell>\n                {userData?.following}\n            </TableCell>\n            <TableCell align=\"center\">\n                <Link href={userData?.html_url} target=\"_blank\" rel=\"noreferrer\">\n                    <GitHubIcon />\n                </Link>\n            </TableCell>\n        </TableRow>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport UserRow from './UserRow';\nimport userActions from '../redux/actions';\nimport './UsersResults.css';\n\nexport default function UsersResults({users}) {\n    const dispatch = useDispatch();\n    const total = useSelector(state => state.total);\n    const search = useSelector(state => state.search);\n    const [page, setPage] = useState(0);\n    const [pageSize, setPageSize] = useState(5);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n        dispatch(userActions.searchUsers(search, newPage, pageSize));\n    };\n    \n    const handleChangeRowsPerPage = (event) => {\n        const newPageSize = parseInt(event.target.value);\n        setPageSize(newPageSize);\n        setPage(0);\n        dispatch(userActions.searchUsers(search, page, newPageSize));\n    };\n\n    useEffect(() => {\n        setPage(0);\n    }, [search]);\n\n    return (\n        <div className=\"user-table-container\">\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead>\n                    <TableRow>\n                        <TableCell>Avatar</TableCell>\n                        <TableCell className=\"user-name-column\">Name</TableCell>\n                        <TableCell className=\"user-user-name-column\">User Name</TableCell>\n                        <TableCell className=\"user-bio-column\">Bio</TableCell>\n                        <TableCell># Repos</TableCell>\n                        <TableCell># Followers</TableCell>\n                        <TableCell># Following</TableCell>\n                        <TableCell>GitHub Profile</TableCell>\n                    </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {users.map((user, index) => (\n                            <UserRow key={index} userUrl={user.url}></UserRow>\n                        ))}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                colSpan={8}\n                                count={total || 0}\n                                rowsPerPage={pageSize || 5}\n                                page={page || 0}\n                                SelectProps={{\n                                    inputProps: { 'aria-label': 'rows per page' },\n                                    native: true,\n                                }}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                            />\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport UsersSearch from '../components/UsersSearch';\nimport UsersResults from '../components/UsersResults';\nimport './SearchUsersScreen.css';\n\nexport default function SearchUsersScreen() {\n    const users = useSelector(state => state.users) || [];\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"search\">\n                <UsersSearch />\n            </div>\n            <div className=\"results\" >\n                <UsersResults users={users} />\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport SearchUsersScreen from './pages/SearchUsersScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchUsersScreen></SearchUsersScreen>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware} from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './redux/rootReducer.js';\n\nconst initialState = { users: [], search: '', page: 0, pageSize: 5, total: 0 };\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default (state = {}, { type, payload }) => {\n    switch (type) {\n        case 'SEARCH_USERS':\n            return {\n                ...state,\n                users: payload.users,\n                search: payload.search,\n                page: payload.page,\n                pageSize: payload.pageSize,\n                total: payload.total\n            };\n        case 'RESET':\n            return {\n                ...state,\n                users: [],\n                search: '',\n                page: 0,\n                pageSize: 5,\n                total: 0\n            };\n        default:\n            return state;\n    }\n}"],"sourceRoot":""}